"""Test module for system testing."""
import pytest

from pymfe.mfe import MFE
from tests.utils import load_xy
import numpy as np


class TestSystem:
    """TestClass for system testing.

    The purpose is the check if, while extracting all available metafeatures,
    the computation of any feature does not interfere in the computation of
    other metafeatures.
    """

    @pytest.mark.parametrize("dt_id, exp_value, precompute", [
        (0, [
            0.20984252,
            1.9531548,
            0.08,
            0.64,
            6.0,
            1.0,
            0.0,
            0.4967439,
            1.0,
            0.008469636865711082,
            0.007803121,
            1.0,
            10.055,
            0.5389795,
            0.14416118,
            706617800.0,
            3690902800000.0,
            0.56000006,
            5.0,
            88.94723409350041,
            0.76,
            0.66,
            0.5,
            148780.75,
            167563.3939195549,
            59987.83,
            5.275,
            12.5,
            5728840.510362266,
            192048.36,
            2.941912,
            0.77901286,
            0.24,
            13,
            4.6153846,
            0.07692308,
            84.933334,
            0.5,
            0.52,
            4.0,
            125660.73,
            2069934.1,
            402946.28,
            147096.14,
            14783.546,
            0.011242621,
            1.0,
            0.48,
            0.66,
            7.0,
            12,
            1.0909090909090908,
            0.24,
            2.0,
            3.0,
            4,
            0,
            2,
            2,
            0.01818181818016529,
            1,
            50,
            0,
            2,
            11,
            0.6931471805599453,
            172.7277151111455,
            1.0,
            0.24999999,
            0.26000002,
            1.0,
            0.016754815003958083,
            0.4,
            2.5,
            2055150.5,
            0,
            580783.0,
            np.nan,
            -0.03842692011975991,
            1.5635381,
            0.091836736,
            0.22,
            0.02,
            0.09090909090909091,
            160978.06,
            3.84,
            0.16146065,
            0.20192307,
            0.38297877,
            3690902800000.0,
            0.09090909,
            58.22425419399301,
            1.698593922818614e-08,
            0.7532455137692577,
            1.4762982,
            0.4,
            2.5,
        ], False),
        (0, [
            0.20984252,
            1.9531548,
            0.08,
            0.64,
            6.0,
            1.0,
            0.0,
            0.4967439,
            1.0,
            0.008469636865711082,
            0.007803121,
            1.0,
            10.055,
            0.5389795,
            0.14416118,
            706617800.0,
            3690902800000.0,
            0.56000006,
            5.0,
            88.94723409350041,
            0.76,
            0.66,
            0.5,
            148780.75,
            167563.3939195549,
            59987.83,
            5.275,
            12.5,
            5728840.510362266,
            192048.36,
            2.941912,
            0.77901286,
            0.24,
            13,
            4.6153846,
            0.07692308,
            84.933334,
            0.5,
            0.52,
            4.0,
            125660.73,
            2069934.1,
            402946.28,
            147096.14,
            14783.546,
            0.011242621,
            1.0,
            0.48,
            0.66,
            7.0,
            12,
            1.0909090909090908,
            0.24,
            2.0,
            3.0,
            4,
            0,
            2,
            2,
            0.01818181818016529,
            1,
            50,
            0,
            2,
            11,
            0.6931471805599453,
            172.7277151111455,
            1.0,
            0.24999999,
            0.26000002,
            1.0,
            0.016754815003958083,
            0.4,
            2.5,
            2055150.5,
            0,
            580783.0,
            np.nan,
            -0.03842692011975991,
            1.5635381,
            0.091836736,
            0.22,
            0.02,
            0.09090909090909091,
            160978.06,
            3.84,
            0.16146065,
            0.20192307,
            0.38297877,
            3690902800000.0,
            0.09090909,
            58.22425419399301,
            1.698593922818614e-08,
            0.7532455137692577,
            1.4762982,
            0.4,
            2.5,
        ], True),
        (2, [
            0.20922251,
            2.2790105,
            0.02666666666666667,
            0.6666666,
            2.5,
            0.9999999999999998,
            0.0,
            0.72548574,
            0.0,
            486.32083931855703,
            0.272326,
            1.584962500721156,
            67.12,
            0.4956224,
            0.58981574,
            0.5943227,
            1.1423229,
            0.88,
            4.0,
            1.8824050451316392,
            0.123333335,
            0.043333333,
            0.33333334,
            3.2217214,
            3.205174566228804,
            2.9762902,
            42.626667,
            37.5,
            3.321079768101941,
            1.7,
            3.0219848,
            -0.79537404,
            0.013333333,
            9,
            3.7777777,
            0.11111111,
            37.466667,
            0.33333334,
            0.98,
            7.0,
            1.074885,
            5.425,
            3.4636667,
            3.6125,
            1.85,
            0.8419881,
            0.1,
            0.013333334,
            0.9533334,
            5.0,
            8,
            2.0,
            0.05333333333333334,
            1.6,
            2.0,
            4,
            0,
            0,
            3,
            0.4999999995833333,
            2,
            150,
            1,
            4,
            1,
            1.0986122886681096,
            1.706701744700453,
            np.nan,
            0.2,
            0.96000004,
            6.0,
            -0.6798579850365509,
            0.6666666,
            2.5,
            3.5749998,
            0,
            0.9473104,
            1.2666595685008588,
            0.5032506980366624,
            0.06603417,
            0.028714776,
            0.02666666666666667,
            0.013333333333333334,
            0.5,
            3.469722,
            3.0588236,
            0.19491705,
            0.27083334,
            0.32,
            1.1423228,
            0.24999999,
            0.7517428073901388,
            2.3392212797698888e-05,
            0.023525453521341614,
            0.46218988,
            0.6,
            1.0,
        ], False),
        (2, [
            0.20922251,
            2.2790105,
            0.02666666666666667,
            0.6666666,
            2.5,
            0.9999999999999998,
            0.0,
            0.72548574,
            0.0,
            486.32083931855703,
            0.272326,
            1.584962500721156,
            67.12,
            0.4956224,
            0.58981574,
            0.5943227,
            1.1423229,
            0.88,
            4.0,
            1.8824050451316392,
            0.123333335,
            0.043333333,
            0.33333334,
            3.2217214,
            3.205174566228804,
            2.9762902,
            42.626667,
            37.5,
            3.321079768101941,
            1.7,
            3.0219848,
            -0.79537404,
            0.013333333,
            9,
            3.7777777,
            0.11111111,
            37.466667,
            0.33333334,
            0.98,
            7.0,
            1.074885,
            5.425,
            3.4636667,
            3.6125,
            1.85,
            0.8419881,
            0.1,
            0.013333334,
            0.9533334,
            5.0,
            8,
            2.0,
            0.05333333333333334,
            1.6,
            2.0,
            4,
            0,
            0,
            3,
            0.4999999995833333,
            2,
            150,
            1,
            4,
            1,
            1.0986122886681096,
            1.706701744700453,
            np.nan,
            0.2,
            0.96000004,
            6.0,
            -0.6798579850365509,
            0.6666666,
            2.5,
            3.5749998,
            0,
            0.9473104,
            1.2666595685008588,
            0.5032506980366624,
            0.06603417,
            0.028714776,
            0.02666666666666667,
            0.013333333333333334,
            0.5,
            3.469722,
            3.0588236,
            0.19491705,
            0.27083334,
            0.32,
            1.1423228,
            0.24999999,
            0.7517428073901388,
            2.3392212797698888e-05,
            0.023525453521341614,
            0.46218988,
            0.6,
            1.0,
        ], True),
    ])
    def test_system_testing(self, dt_id, exp_value, precompute):
        precomp_group = "all" if precompute else None
        X, y = load_xy(dt_id)
        mfe = MFE(
            groups=("landmarking", "general", "statistical", "model-based",
                    "info-theory", "relative", "clustering", "complexity",
                    "itemset", "concept"),
            summary="mean",
            random_state=1234).fit(
                X.values, y.values, precomp_groups=precomp_group)
        value = mfe.extract()[1]

        assert np.allclose(
            value, exp_value, equal_nan=True, rtol=0.05, atol=0.001)

    @pytest.mark.parametrize("dt_id, exp_value, precompute", [
        (0, [
            2.09842458e-01,
            1.95315480e+00,
            8.00000000e-02,
            1.00000000e+00,
            1.00550003e+01,
            1.44161180e-01,
            7.06617792e+08,
            3.69090285e+12,
            1.48780750e+05,
            5.99878281e+04,
            1.25000000e+01,
            1.92048359e+05,
            7.79012859e-01,
            1.25660727e+05,
            2.06993412e+06,
            4.02946281e+05,
            1.47096141e+05,
            1.47835459e+04,
            4.00000000e+00,
            0.00000000e+00,
            2.00000000e+00,
            1.81818182e-02,
            5.00000000e+01,
            0.00000000e+00,
            2.00000000e+00,
            1.10000000e+01,
            1.00000000e+00,
            2.49999985e-01,
            2.05515050e+06,
            5.80783000e+05,
            1.56353807e+00,
            9.18367356e-02,
            2.20000000e-01,
            2.00000000e-02,
            9.09090909e-02,
            1.60978062e+05,
            3.82978767e-01,
            3.69090285e+12,
            1.47629821e+00,
        ], False),
        (0, [
            2.09842458e-01,
            1.95315480e+00,
            8.00000000e-02,
            1.00000000e+00,
            1.00550003e+01,
            1.44161180e-01,
            7.06617792e+08,
            3.69090285e+12,
            1.48780750e+05,
            5.99878281e+04,
            1.25000000e+01,
            1.92048359e+05,
            7.79012859e-01,
            1.25660727e+05,
            2.06993412e+06,
            4.02946281e+05,
            1.47096141e+05,
            1.47835459e+04,
            4.00000000e+00,
            0.00000000e+00,
            2.00000000e+00,
            1.81818182e-02,
            5.00000000e+01,
            0.00000000e+00,
            2.00000000e+00,
            1.10000000e+01,
            1.00000000e+00,
            2.49999985e-01,
            2.05515050e+06,
            5.80783000e+05,
            1.56353807e+00,
            9.18367356e-02,
            2.20000000e-01,
            2.00000000e-02,
            9.09090909e-02,
            1.60978062e+05,
            3.82978767e-01,
            3.69090285e+12,
            1.47629821e+00,
        ], True),
        (2, [
            2.09222436e-01,
            2.27901053e+00,
            2.66666667e-02,
            0.00000000e+00,
            6.71200027e+01,
            5.89815736e-01,
            5.94322681e-01,
            1.14232290e+00,
            3.22172141e+00,
            2.97629023e+00,
            3.75000000e+01,
            1.70000005e+00,
            -7.95374036e-01,
            1.07488501e+00,
            5.42500019e+00,
            3.46366668e+00,
            3.61249995e+00,
            1.85000002e+00,
            4.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            5.00000000e-01,
            1.50000000e+02,
            1.00000000e+00,
            4.00000000e+00,
            1.00000000e+00,
            np.nan,
            2.00000003e-01,
            3.57499981e+00,
            9.47310388e-01,
            6.60341680e-02,
            2.87147760e-02,
            2.66666667e-02,
            1.33333333e-02,
            5.00000000e-01,
            3.46972203e+00,
            3.19999993e-01,
            1.14232278e+00,
            4.62189883e-01,
        ], False),
        (2, [
            2.09222436e-01,
            2.27901053e+00,
            2.66666667e-02,
            0.00000000e+00,
            6.71200027e+01,
            5.89815736e-01,
            5.94322681e-01,
            1.14232290e+00,
            3.22172141e+00,
            2.97629023e+00,
            3.75000000e+01,
            1.70000005e+00,
            -7.95374036e-01,
            1.07488501e+00,
            5.42500019e+00,
            3.46366668e+00,
            3.61249995e+00,
            1.85000002e+00,
            4.00000000e+00,
            0.00000000e+00,
            0.00000000e+00,
            5.00000000e-01,
            1.50000000e+02,
            1.00000000e+00,
            4.00000000e+00,
            1.00000000e+00,
            np.nan,
            2.00000003e-01,
            3.57499981e+00,
            9.47310388e-01,
            6.60341680e-02,
            2.87147760e-02,
            2.66666667e-02,
            1.33333333e-02,
            5.00000000e-01,
            3.46972203e+00,
            3.19999993e-01,
            1.14232278e+00,
            4.62189883e-01,
        ], True),
    ])
    def test_system_testing(self, dt_id, exp_value, precompute):
        precomp_group = "all" if precompute else None
        X, y = load_xy(dt_id)
        mfe = MFE(
            groups=("landmarking", "general", "statistical", "model-based",
                    "info-theory", "relative", "clustering", "complexity",
                    "itemset", "concept"),
            summary="mean",
            random_state=1234).fit(
                X=X.values, y=None, precomp_groups=precomp_group)
        value = mfe.extract()[1]

        assert np.allclose(
            value, exp_value, equal_nan=True, rtol=0.05, atol=0.001)
